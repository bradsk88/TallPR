{"version":3,"file":"index.js","sources":["../dist-src/version.js","../dist-src/is-issue-labels-update-or-replace.js","../dist-src/index.js"],"sourcesContent":["export const VERSION = \"1.2.9\";\n","export function isIssueLabelsUpdateOrReplace({ method, url }) {\n    if (![\"POST\", \"PUT\"].includes(method)) {\n        return false;\n    }\n    if (!/\\/repos\\/[^/]+\\/[^/]+\\/issues\\/[^/]+\\/labels/.test(url)) {\n        return false;\n    }\n    return true;\n}\n","import { RequestError } from \"@octokit/request-error\";\nimport { VERSION } from \"./version\";\nimport { isIssueLabelsUpdateOrReplace } from \"./is-issue-labels-update-or-replace\";\nexport function enterpriseCompatibility(octokit) {\n    octokit.hook.wrap(\"request\", async (request, options) => {\n        // see https://github.com/octokit/rest.js/blob/15.x/lib/routes.json#L3046-L3068\n        if (isIssueLabelsUpdateOrReplace(options)) {\n            options.data = options.labels;\n            delete options.labels;\n            // for @octokit/rest v16.x, remove validation of labels option\n            /* istanbul ignore if */\n            if (options.request.validate) {\n                delete options.request.validate.labels;\n            }\n            return request(options);\n        }\n        // TODO: implement fix for #62 here\n        // https://github.com/octokit/plugin-enterprise-compatibility.js/issues/60\n        if (/\\/orgs\\/[^/]+\\/teams/.test(options.url)) {\n            try {\n                return await request(options);\n            }\n            catch (error) {\n                if (error.status !== 404) {\n                    throw error;\n                }\n                if (!error.headers || !error.headers[\"x-github-enterprise-version\"]) {\n                    throw error;\n                }\n                const deprecatedUrl = options.url.replace(/\\/orgs\\/[^/]+\\/teams\\/[^/]+/, \"/teams/{team_id}\");\n                throw new RequestError(`\"${options.method} ${options.url}\" is not supported in your GitHub Enterprise Server version. Please replace with octokit.request(\"${options.method} ${deprecatedUrl}\", { team_id })`, 404, {\n                    request: options,\n                });\n            }\n        }\n        return request(options);\n    });\n}\nenterpriseCompatibility.VERSION = VERSION;\n"],"names":["VERSION","isIssueLabelsUpdateOrReplace","method","url","includes","test","enterpriseCompatibility","octokit","hook","wrap","request","options","data","labels","validate","error","status","headers","deprecatedUrl","replace","RequestError"],"mappings":";;;;;;AAAO,MAAMA,OAAO,GAAG,mBAAhB;;ACAA,SAASC,4BAAT,CAAsC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAtC,EAAuD;AAC1D,MAAI,CAAC,CAAC,MAAD,EAAS,KAAT,EAAgBC,QAAhB,CAAyBF,MAAzB,CAAL,EAAuC;AACnC,WAAO,KAAP;AACH;;AACD,MAAI,CAAC,+CAA+CG,IAA/C,CAAoDF,GAApD,CAAL,EAA+D;AAC3D,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH;;ACLM,SAASG,uBAAT,CAAiCC,OAAjC,EAA0C;AAC7CA,EAAAA,OAAO,CAACC,IAAR,CAAaC,IAAb,CAAkB,SAAlB,EAA6B,OAAOC,OAAP,EAAgBC,OAAhB,KAA4B;AACrD;AACA,QAAIV,4BAA4B,CAACU,OAAD,CAAhC,EAA2C;AACvCA,MAAAA,OAAO,CAACC,IAAR,GAAeD,OAAO,CAACE,MAAvB;AACA,aAAOF,OAAO,CAACE,MAAf,CAFuC;;AAIvC;;AACA,UAAIF,OAAO,CAACD,OAAR,CAAgBI,QAApB,EAA8B;AAC1B,eAAOH,OAAO,CAACD,OAAR,CAAgBI,QAAhB,CAAyBD,MAAhC;AACH;;AACD,aAAOH,OAAO,CAACC,OAAD,CAAd;AACH,KAXoD;AAarD;;;AACA,QAAI,uBAAuBN,IAAvB,CAA4BM,OAAO,CAACR,GAApC,CAAJ,EAA8C;AAC1C,UAAI;AACA,eAAO,MAAMO,OAAO,CAACC,OAAD,CAApB;AACH,OAFD,CAGA,OAAOI,KAAP,EAAc;AACV,YAAIA,KAAK,CAACC,MAAN,KAAiB,GAArB,EAA0B;AACtB,gBAAMD,KAAN;AACH;;AACD,YAAI,CAACA,KAAK,CAACE,OAAP,IAAkB,CAACF,KAAK,CAACE,OAAN,CAAc,6BAAd,CAAvB,EAAqE;AACjE,gBAAMF,KAAN;AACH;;AACD,cAAMG,aAAa,GAAGP,OAAO,CAACR,GAAR,CAAYgB,OAAZ,CAAoB,6BAApB,EAAmD,kBAAnD,CAAtB;AACA,cAAM,IAAIC,yBAAJ,CAAkB,IAAGT,OAAO,CAACT,MAAO,IAAGS,OAAO,CAACR,GAAI,qGAAoGQ,OAAO,CAACT,MAAO,IAAGgB,aAAc,iBAAvL,EAAyM,GAAzM,EAA8M;AAChNR,UAAAA,OAAO,EAAEC;AADuM,SAA9M,CAAN;AAGH;AACJ;;AACD,WAAOD,OAAO,CAACC,OAAD,CAAd;AACH,GAhCD;AAiCH;AACDL,uBAAuB,CAACN,OAAxB,GAAkCA,OAAlC;;;;"}